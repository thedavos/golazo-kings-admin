/**
 * Estrategias de cach√© predefinidas para @pinia/colada
 * Centraliza la configuraci√≥n de staleTime y gcTime
 */

// üè∑Ô∏è Tipos de estrategia disponibles
export type CacheStrategy =
  | 'realtime' // Datos en tiempo real
  | 'frequent' // Datos que cambian frecuentemente
  | 'moderate' // Datos que cambian moderadamente
  | 'stable' // Datos estables
  | 'static' // Datos muy estables/configuraci√≥n
  | 'aggressive' // Cache muy agresivo
  | 'minimal'; // Cache m√≠nimo

// ‚è∞ Constantes de tiempo (en milisegundos)
const TIME_CONSTANTS = {
  SECOND: 1000,
  MINUTE: 60 * 1000,
  HOUR: 60 * 60 * 1000,
  DAY: 24 * 60 * 60 * 1000,
} as const;

// üìä Configuraci√≥n de estrategias
const CACHE_STRATEGIES: Record<
  CacheStrategy,
  { staleTime: number; gcTime: number; description: string }
> = {
  // üî¥ Tiempo Real - Chat, notificaciones, m√©tricas en vivo
  realtime: {
    staleTime: 0, // Siempre obsoleto
    gcTime: 2 * TIME_CONSTANTS.MINUTE, // 2 minutos en cache
    description: 'Datos en tiempo real que cambian constantemente',
  },

  // üü† Frecuente - Posts, comentarios, actividad reciente
  frequent: {
    staleTime: 30 * TIME_CONSTANTS.SECOND, // 30 segundos
    gcTime: 5 * TIME_CONSTANTS.MINUTE, // 5 minutos en cache
    description: 'Datos que cambian frecuentemente',
  },

  // üü° Moderado - Listas de usuarios, equipos, proyectos
  moderate: {
    staleTime: TIME_CONSTANTS.MINUTE, // 1 minuto
    gcTime: 10 * TIME_CONSTANTS.MINUTE, // 10 minutos en cache
    description: 'Datos que cambian moderadamente',
  },

  // üü¢ Estable - Perfiles, configuraci√≥n de usuario, cat√°logos
  stable: {
    staleTime: 5 * TIME_CONSTANTS.MINUTE, // 5 minutos
    gcTime: 30 * TIME_CONSTANTS.MINUTE, // 30 minutos en cache
    description: 'Datos estables que cambian ocasionalmente',
  },

  // üîµ Est√°tico - Configuraci√≥n del sistema, constantes, roles
  static: {
    staleTime: 30 * TIME_CONSTANTS.MINUTE, // 30 minutos
    gcTime: 2 * TIME_CONSTANTS.HOUR, // 2 horas en cache
    description: 'Datos muy estables o configuraci√≥n del sistema',
  },

  // üü£ Agresivo - Para optimizar performance extrema
  aggressive: {
    staleTime: 15 * TIME_CONSTANTS.MINUTE, // 15 minutos
    gcTime: TIME_CONSTANTS.DAY, // 1 d√≠a en cach√©
    description: 'Cache muy agresivo para datos raramente modificados',
  },

  // ‚ö™ M√≠nimo - Para datos muy sensibles o debugging
  minimal: {
    staleTime: 0, // Siempre obsoleto
    gcTime: TIME_CONSTANTS.MINUTE, // 1 minuto en cache
    description: 'Cache m√≠nimo para datos muy sensibles',
  },
};

/**
 * Obtiene la configuraci√≥n de cach√© para una estrategia espec√≠fica
 */
export function getCacheStrategy(strategy: CacheStrategy) {
  const config = CACHE_STRATEGIES[strategy];

  if (!config) {
    console.warn(`‚ö†Ô∏è Estrategia de cache desconocida: ${strategy}. Usando 'moderate' por defecto.`);
    return CACHE_STRATEGIES.moderate;
  }

  return config;
}

/**
 * Crea una configuraci√≥n de cach√© personalizada
 */
export function createCustomCacheStrategy(
  staleMinutes: number,
  gcMinutes: number,
  description?: string,
) {
  return {
    staleTime: staleMinutes * TIME_CONSTANTS.MINUTE,
    gcTime: gcMinutes * TIME_CONSTANTS.MINUTE,
    description: description || `Custom: ${staleMinutes}min stale, ${gcMinutes}min gc`,
  };
}

/**
 * Configuraciones tem√°ticas para diferentes tipos de datos
 */
export const THEME_STRATEGIES = {
  // üë• Gesti√≥n de usuarios
  users: {
    list: getCacheStrategy('moderate'), // Lista de usuarios
    profile: getCacheStrategy('stable'), // Perfil individual
    currentUser: getCacheStrategy('frequent'), // Usuario actual
  },

  // üè¢ Gesti√≥n de equipos/organizaciones
  teams: {
    list: getCacheStrategy('moderate'), // Lista de equipos
    detail: getCacheStrategy('moderate'), // Detalle de equipo
  },

  // ‚öôÔ∏è Configuraci√≥n del sistema
  system: {
    config: getCacheStrategy('static'), // Configuraci√≥n global
    permissions: getCacheStrategy('stable'), // Permisos
    roles: getCacheStrategy('static'), // Roles del sistema
  },

  // üìä Analytics y m√©tricas
  analytics: {
    realtime: getCacheStrategy('realtime'), // M√©tricas en tiempo real
    daily: getCacheStrategy('moderate'), // Reportes diarios
    historical: getCacheStrategy('aggressive'), // Datos hist√≥ricos
  },

  // üí¨ Comunicaci√≥n
  communication: {
    messages: getCacheStrategy('realtime'), // Mensajes de chat
    notifications: getCacheStrategy('frequent'), // Notificaciones
    announcements: getCacheStrategy('stable'), // Anuncios
  },
} as const;

/**
 * Utilidad para debugging - muestra todas las estrategias disponibles
 */
export function logCacheStrategies() {
  console.group('üóÇÔ∏è Estrategias de Cache Disponibles');

  Object.entries(CACHE_STRATEGIES).forEach(([name, config]) => {
    const staleMin = Math.round((config.staleTime / TIME_CONSTANTS.MINUTE) * 100) / 100;
    const gcMin = Math.round((config.gcTime / TIME_CONSTANTS.MINUTE) * 100) / 100;

    console.log(
      `üìã ${name.padEnd(10)} | Stale: ${staleMin}min | GC: ${gcMin}min | ${config.description}`,
    );
  });

  console.groupEnd();
}

// üö® Validaci√≥n de configuraci√≥n (solo en desarrollo)
if (import.meta.env.DEV) {
  // Verificar que staleTime < gcTime en todas las estrategias
  Object.entries(CACHE_STRATEGIES).forEach(([name, config]) => {
    if (config.staleTime > config.gcTime) {
      console.error(
        `‚ùå Error en estrategia '${name}': staleTime (${config.staleTime}) debe ser menor que gcTime (${config.gcTime})`,
      );
    }
  });
}
